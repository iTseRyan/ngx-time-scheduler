import { ChangeDetectorRef, ElementRef, OnDestroy, OnInit } from '@angular/core';
import { CdkDragDrop } from '@angular/cdk/drag-drop';
import { NgxTimeSchedulerService } from './ngx-time-scheduler.service';
import { Header, ItemMeta, Item, Period, SectionItem, Section, Text, Events } from './ngx-time-scheduler.model';
import * as moment_ from 'moment';
import { Subscription } from 'rxjs';
export declare class NgxTimeSchedulerComponent implements OnInit, OnDestroy {
    private changeDetector;
    private service;
    set SectionTd(elementRef: ElementRef);
    currentTimeFormat: string;
    showCurrentTime: boolean;
    showGoto: boolean;
    showToday: boolean;
    allowDragging: boolean;
    locale: string;
    showBusinessDayOnly: boolean;
    headerFormat: string;
    minRowHeight: number;
    maxHeight: string;
    text: Text;
    items: Item[];
    sections: Section[];
    periods: Period[];
    events: Events;
    start: moment_.Moment;
    end: moment_.Moment;
    showGotoModal: boolean;
    currentTimeIndicatorPosition: string;
    currentTimeVisibility: string;
    currentTimeTitle: string;
    ShowCurrentTimeHandle: any;
    SectionLeftMeasure: string;
    currentPeriod: Period;
    currentPeriodMinuteDiff: number;
    header: Header[];
    sectionItems: SectionItem[];
    subscription: Subscription;
    constructor(changeDetector: ChangeDetectorRef, service: NgxTimeSchedulerService);
    ngOnInit(): void;
    refreshView(): void;
    trackByFn(index: any, item: any): any;
    setSectionsInSectionItems(): void;
    setItemsInSectionItems(): void;
    itemMetaCal(itemMeta: ItemMeta): ItemMeta;
    calCssTop(sortedItems: any): void;
    changePeriod(period: Period, userTrigger?: boolean): void;
    showCurrentTimeIndicator: () => void;
    gotoToday(): void;
    nextPeriod(): void;
    previousPeriod(): void;
    gotoDate(event: any): void;
    getDatesBetweenTwoDates(format: string, index: number): Header;
    getNumberOfWeekendDays(startDate: any, endDate: any): number;
    drop(event: CdkDragDrop<Section>): void;
    itemPush(): void;
    itemPop(): void;
    itemRemove(): void;
    sectionPush(): void;
    sectionPop(): void;
    sectionRemove(): void;
    refresh(): void;
    ngOnDestroy(): void;
}
